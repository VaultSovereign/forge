#!/usr/bin/env node
// Generate docs/SITEMAP.md listing all Markdown files under docs/
// Usage: node scripts/generate-docs-sitemap.mjs [root=docs] [out=SITEMAP.md]

import { promises as fs } from 'fs';
import path from 'path';

const root = process.argv[2] || 'docs';
const outFile = process.argv[3] || 'SITEMAP.md';

async function walk(dir) {
  const entries = await fs.readdir(dir, { withFileTypes: true });
  const files = await Promise.all(entries.map(async (e) => {
    const res = path.join(dir, e.name);
    if (e.isDirectory()) return walk(res);
    return res;
  }));
  return files.flat();
}

function toTitle(file) {
  const base = path.basename(file, path.extname(file));
  if (base.toLowerCase() === 'readme') return path.basename(path.dirname(file));
  return base.replace(/[-_]/g, ' ');
}

function relFromDocs(p) {
  return path.relative(root, p) || p;
}

async function main() {
  const absRoot = path.resolve(root);
  const files = (await walk(absRoot))
    .filter((f) => f.endsWith('.md'))
    .filter((f) => !/\bSITEMAP\.md$/.test(f));

  // Group by first-level subdir under docs ("." for root)
  const groups = new Map();
  for (const f of files) {
    const rel = path.relative(absRoot, f);
    const parts = rel.split(path.sep);
    const key = parts.length > 1 ? parts[0] : '.';
    if (!groups.has(key)) groups.set(key, []);
    groups.get(key).push(f);
  }
  // Sort groups and files alphabetically
  const sortedKeys = Array.from(groups.keys()).sort((a, b) => a.localeCompare(b));
  for (const k of sortedKeys) groups.get(k).sort((a, b) => a.localeCompare(b));

  const lines = [];
lines.push('<!-- ⚠️ AUTO-GENERATED: do not edit. See scripts/generate-docs-sitemap.mjs -->');  lines.push('');
  lines.push('# Docs Sitemap');
  lines.push('');
  // Navigation buttons (persist across generations)
  lines.push('<div style="margin:16px 0; display:flex; gap:12px; flex-wrap:wrap;">');
  lines.push('  <a href="index.md" style="display:inline-block; padding:8px 12px; background:#0969da; color:#fff; border-radius:6px; text-decoration:none; font-weight:600;">🏠 Docs Hub</a>');
  lines.push('  <a href="INDEX.md" style="display:inline-block; padding:8px 12px; background:#6f42c1; color:#fff; border-radius:6px; text-decoration:none; font-weight:600;">👉 Curated Docs Index</a>');
  lines.push('</div>');
  lines.push('');
  lines.push(`_Auto-generated by \`scripts/generate-docs-sitemap.mjs\`. Generated on ${new Date().toISOString()}._`);
  lines.push('');

  for (const key of sortedKeys) {
    const section = key === '.' ? 'Root' : key;
    lines.push(`## ${section}`);
    for (const f of groups.get(key)) {
      const rel = relFromDocs(f);
      const title = toTitle(f);
      lines.push(`- [${title}](${rel.replace(/\\\\/g, '/')})`);
    }
    lines.push('');
  }

  const outPath = path.join(absRoot, outFile);
  await fs.writeFile(outPath, lines.join('\n') + '\n', 'utf8');
  console.log(`Wrote ${outPath}`);
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
